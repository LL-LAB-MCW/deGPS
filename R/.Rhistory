source("deGPS_yang_linux.R")
require(edgeR)
require(DESeq)
require(DESeq2)
require(ggplot2)
require(gridExtra)
require(deGPS)
data(flyData)
str(flyData)
install.packages(c("edgeR", "DESeq", "DESeq2"))
load("../data/flyData.RData")
str(flyData)
i <- 1
group <- rep(1:2, each = 6)
simuData <- as.matrix(flyData$data[ , -1])
simuData <- simuData[ , flyData$compIdx[[i]]]
titleName <- names(flyData$compIdx)[i]             ### the name used in the title of the final plot
###remove genes of all-zero read counts
simuData <- simuData[apply(simuData, 1, function(x) !all(x == 0)), ]
flyRes <- deGPS_mRNA(data = simuData, group = group,
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 2, nSubcore = 2, method = "GP-Theta",
empirical.T.stats = NULL)
)
simuData <- simuData[apply(simuData, 1, function(x) !all(x == 0)), ]
group <- rep(1:2, each = 6)
simuData <- as.matrix(flyData$data[ , -1])
simuData <- simuData[ , flyData$compIdx[[i]]]
titleName <- names(flyData$compIdx)[i]             ### the name used in the title of the final plot
###remove genes of all-zero read counts
simuData <- simuData[apply(simuData, 1, function(x) !all(x == 0)), ]
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 2, nSubcore = 2, method = "GP-Theta",
empirical.T.stats = NULL)
library(doParallel)
install.packages(c("doParallel", "foreach"))
library(edgeR)
install.packages("edgeR")
setRepositories()
install.packages("edgeR")
install.packages("DESeq")
install.packages("DESeq")
library(edgeR)
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 2, nSubcore = 2, method = "GP-Theta",
empirical.T.stats = NULL)
library(doParallel)
library(foreach)
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 2, nSubcore = 2, method = "GP-Theta",
empirical.T.stats = NULL)
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 2, nSubcore = 2, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE)
library(fdrtool)
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 2, nSubcore = 2, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE)
str(flyRes)
hist(flyRes$ pvalue)
library(fdrtool)
null.mean <- 0; null.sd <- 2
null.stats <- rnorm(800, null.mean, null.sd)
DE.mean <- 5
DE.stats <- sign(rnorm(200)) * runif(200, DE.mean-1, DE.mean + 1)
stats <- c(null.stats, DE.stats)
hist(stats, col = "lavender")p.overall <- 1-ecdf(stats)(abs(stats))
hist(stats, col = "lavender")
p.overall <- 1-ecdf(stats)(abs(stats))
hist(p.overall, col = "coral4", breaks = 50, main = "wrong p-vals from overall
distribution")
p.true <- 2-2*(0.8)*pnorm(abs(stats), sd = null.sd)
hist(p.true, col = "darkseagreen4", breaks = 50, main = "correct p-vals from true
null
distribution")
## fdrtool p-values
p.fdrtool <- fdrtool(stats)$pval
## true p-vals vs. ecdf p-vals:
qqplot(p.overall, p.true)
## true p-vals vs. fdrtool p-vals:
qqplot(p.fdrtool, p.true)
length(stats)
p.fdrtool[1:2]
p.fdrtool[1:10]
for(i in 1:10)cat(fdrtool(stats[c(i, 11:length(stats))])$pval, " ")
p.fdrtool[1:10]
for(i in 1:10)cat(fdrtool(stats[c(i, 11:length(stats))])$pval[i], " ")
kkk <- NULL
for(i in 1:10) kkk <- c(kkk, fdrtool(stats[c(i, 11:length(stats))])$pval[1])
kkk
p.fdrtool[1:10]
fdrtool
for(j in 1:nrow(dataSim)){
}
source("deGPS_yang_linux.R")
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 2, nSubcore = 2, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE)
source("deGPS_yang_linux.R")
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 2, nSubcore = 2, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE)
source("deGPS_yang_linux.R")
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 3, nSubcore = 3, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE)
source("deGPS_yang_linux.R")
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 4, nSubcore = 4, method = "GP-Theta",
)
simuData <- simuData[runif(nrow(SimuData)) < 0.3, ]
simuData <- as.matrix(flyData$data[ , -1])
simuData <- simuData[ , flyData$compIdx[[i]]]
i <- 1
simuData <- as.matrix(flyData$data[ , -1])
simuData <- simuData[ , flyData$compIdx[[i]]]
titleName <- names(flyData$compIdx)[i]             ### the name used in the title of the final plot
simuData <- simuData[apply(simuData, 1, function(x) !all(x == 0)), ]
simuData <- simuData[runif(nrow(SimuData)) < 0.3, ]
simuData <- simuData[runif(nrow(simuData)) < 0.3, ]
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 4, nSubcore = 4, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE)
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 4, nSubcore = 4, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE, regularized = TRUE)
library(samr)
install.packages("samr")
library(samr)
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 4, nSubcore = 4, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE, regularized = TRUE)
library(st)
install.packages("st")
install.packages("st")
install.packages("C:\Users\dance_000\Downloads\st_1.2.4.tar.gz", repo = NULL)
install.packages("C:\\Users\\dance_000\\Downloads\\st_1.2.4.tar.gz", repo = NULL)
install.packages("C:\\Users\\dance_000\\Downloads\\st_1.2.4.zip", repo = NULL)
library(st)
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 4, nSubcore = 4, method = "GP-Theta",
empirical.T.stats = NULL, mixFDR = TRUE, regularized = TRUE)
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 4, nSubcore = 4, method = "GP-Theta",
empirical.T.stats = NULL, regularized = TRUE)
sam.stat
source("deGPS_yang_linux.R")
flyRes <- deGPS_mRNA(data = simuData, group = group,
ncore = 4, nSubcore = 4, method = "GP-Theta",
empirical.T.stats = NULL, regularized = TRUE)
